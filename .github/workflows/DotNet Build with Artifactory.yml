name: DotNet Build for msteams-jira-server with JFrog Artifactory

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  actions: read           # for detecting the Github Actions environment
  id-token: write         # for creating OIDC tokens for signing
  packages: write         # for uploading attestations
  contents: read          # read the contents permission
  security-events: write  # for uploading code scanning

jobs:
  build:
    name: 'DotNet Build for msteams-jira-server'
    env:
      JFROG_CLI_BUILD_NAME: 'msteams-jira-server'
      JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}
      JFROG_CLI_BUILD_PROJECT: ${{ vars.JF_PROJECT }}
      JFROG_CLI_LOG_LEVEL: INFO
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          clean: false

      - name: Replace JiraMicrosoftTeamsIntegration version
        uses: rvolo/xml-replace-action@v0.3
        with:
          filepath: "${{ github.workspace}}/src/MicrosoftTeamsIntegration.Jira/MicrosoftTeamsIntegration.Jira.csproj"
          xpath: "/Project/PropertyGroup/Version/text()"
          replace: "${{ github.run_number}}"
        
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: https://${{ vars.JF_URL }}/
        with:
          oidc-provider-name: mikeho-github
          oidc-audience: mikeho-audience

      - name: DotNet Configure
        run: |
          jf dotnet-config --repo-resolve="mikeho-msteams-jira-nuget-remote"
      
      - name: Restore Dependencies from Artifactory
        run: |
          jf dotnet restore
          
      #- name: JFrog Curation Audit
      #  run: |
      #    jf mvn-config --repo-resolve-releases mikeho-jvm-tasks-gradle-remote --repo-resolve-snapshots mikeho-jvm-tasks-gradle-remote --repo-deploy-releases mikeho-jvm-tasks-gradle-release-local --repo-deploy-snapshots mikeho-jvm-tasks-gradle-dev-local
      #    echo "jvmtasksArtifactName=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)" >> $GITHUB_ENV
      #    echo "jvmtasksVersion=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
      #    jf curation-audit
      
      #- name: Audit Source Code
      #  run: |
      #    jf audit --licenses --format=table --gradle=true
          
      - name: Build Project
        run: |
          jf dotnet build MicrosoftTeamsJiraIntegration.sln \
            -c Release --no-restore \
            --build-name="${{ env.JFROG_CLI_BUILD_NAME }}" \
            --build-number="${{ github.run_id }}"
        shell: powershell

      - name: Run Tests
        run: jf dotnet test --logger:"junit;LogFilePath=..\artifacts\{assembly}-test-result.xml"

      - name: Publish test report
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: always()
        with:
          junit_files: ${{ github.workspace }}/tests/artifacts/*test-result.xml
          
      - name: Publish application
        run: jf dotnet publish MicrosoftTeamsJiraIntegration.sln -c Release -o 'publish/jira'

      - name: Upload Artifacts to Artifactory
        run: |
          jf rt u "publish/jira" \
            "mikeho-msteams-jira-nuget-local/dotnet-sample" \
            --build-name="${{ env.JFROG_CLI_BUILD_NAME }}" \
            --build-number="${{ github.run_id }}"
          
      - name: Publish build info
        run: |
          # Collect environment variables for the build
          jf rt build-collect-env --project ${{ env.JFROG_CLI_BUILD_PROJECT }} ${{ env.JFROG_CLI_BUILD_NAME }} ${{ env.JFROG_CLI_BUILD_NUMBER }}  
          # Collect VCS details from Git and add them to the build
          jf rt build-add-git --project ${{ env.JFROG_CLI_BUILD_PROJECT }} ${{ env.JFROG_CLI_BUILD_NAME }} ${{ env.JFROG_CLI_BUILD_NUMBER }}
          jf rt build-publish --project ${{ env.JFROG_CLI_BUILD_PROJECT }} ${{ env.JFROG_CLI_BUILD_NAME }} ${{ env.JFROG_CLI_BUILD_NUMBER }}
      
      #- name: Scan build
      #  if: github.ref == 'refs/heads/master'
      #  run: |
      #    jf build-scan --vuln --fail=false --project=${{ env.JFROG_CLI_BUILD_PROJECT }} ${{ env.JFROG_CLI_BUILD_NAME }} ${{ env.JFROG_CLI_BUILD_NUMBER }}  
     
